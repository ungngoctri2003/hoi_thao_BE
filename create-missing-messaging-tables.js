const oracledb = require('oracledb');
const { withConn } = require('./dist/config/db');

async function createMissingMessagingTables() {
  try {
    console.log('üîß Creating missing messaging tables...');

    // Create MESSAGING_SESSIONS table
    console.log('üìù Creating MESSAGING_SESSIONS table...');
    await withConn(async conn => {
      await conn.execute(
        `
        CREATE TABLE MESSAGING_SESSIONS (
          ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
          USER1_ID NUMBER NOT NULL,
          USER2_ID NUMBER NOT NULL,
          CONFERENCE_ID NUMBER,
          CREATED_AT TIMESTAMP DEFAULT SYSTIMESTAMP,
          UPDATED_AT TIMESTAMP DEFAULT SYSTIMESTAMP,
          IS_ACTIVE NUMBER(1) DEFAULT 1,
          CONSTRAINT FK_MS_USER1 FOREIGN KEY (USER1_ID) REFERENCES APP_USERS(ID),
          CONSTRAINT FK_MS_USER2 FOREIGN KEY (USER2_ID) REFERENCES APP_USERS(ID),
          CONSTRAINT FK_MS_CONFERENCE FOREIGN KEY (CONFERENCE_ID) REFERENCES CONFERENCES(ID),
          CONSTRAINT CHK_MS_ACTIVE CHECK (IS_ACTIVE IN (0, 1)),
          CONSTRAINT UK_MS_USERS UNIQUE (USER1_ID, USER2_ID, CONFERENCE_ID)
        )
      `,
        {},
        { autoCommit: true }
      );
    });
    console.log('‚úÖ MESSAGING_SESSIONS table created successfully');

    // Create MESSAGING_MESSAGES table
    console.log('üìù Creating MESSAGING_MESSAGES table...');
    await withConn(async conn => {
      await conn.execute(
        `
        CREATE TABLE MESSAGING_MESSAGES (
          ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
          SESSION_ID NUMBER NOT NULL,
          CONTENT CLOB NOT NULL,
          MESSAGE_TYPE VARCHAR2(20) DEFAULT 'text',
          SENDER_ID NUMBER NOT NULL,
          ATTENDEE_ID NUMBER,
          CREATED_AT TIMESTAMP DEFAULT SYSTIMESTAMP,
          IS_READ NUMBER(1) DEFAULT 0,
          READ_AT TIMESTAMP,
          CONSTRAINT FK_MM_SESSION FOREIGN KEY (SESSION_ID) REFERENCES MESSAGING_SESSIONS(ID),
          CONSTRAINT FK_MM_SENDER FOREIGN KEY (SENDER_ID) REFERENCES APP_USERS(ID),
          CONSTRAINT FK_MM_ATTENDEE FOREIGN KEY (ATTENDEE_ID) REFERENCES APP_USERS(ID),
          CONSTRAINT CHK_MM_READ CHECK (IS_READ IN (0, 1)),
          CONSTRAINT CHK_MM_TYPE CHECK (MESSAGE_TYPE IN ('text', 'image', 'file'))
        )
      `,
        {},
        { autoCommit: true }
      );
    });
    console.log('‚úÖ MESSAGING_MESSAGES table created successfully');

    // Create indexes for better performance
    console.log('üìù Creating indexes...');
    await withConn(async conn => {
      await conn.execute(
        `CREATE INDEX IDX_MS_USERS ON MESSAGING_SESSIONS(USER1_ID, USER2_ID)`,
        {},
        { autoCommit: true }
      );
      await conn.execute(
        `CREATE INDEX IDX_MS_CONFERENCE ON MESSAGING_SESSIONS(CONFERENCE_ID)`,
        {},
        { autoCommit: true }
      );
      await conn.execute(
        `CREATE INDEX IDX_MM_SESSION ON MESSAGING_MESSAGES(SESSION_ID)`,
        {},
        { autoCommit: true }
      );
      await conn.execute(
        `CREATE INDEX IDX_MM_SENDER ON MESSAGING_MESSAGES(SENDER_ID)`,
        {},
        { autoCommit: true }
      );
      await conn.execute(
        `CREATE INDEX IDX_MM_ATTENDEE ON MESSAGING_MESSAGES(ATTENDEE_ID)`,
        {},
        { autoCommit: true }
      );
      await conn.execute(
        `CREATE INDEX IDX_MM_CREATED_AT ON MESSAGING_MESSAGES(CREATED_AT)`,
        {},
        { autoCommit: true }
      );
    });
    console.log('‚úÖ Indexes created successfully');

    // Insert some sample data for testing
    console.log('üìù Inserting sample data...');
    await withConn(async conn => {
      // Create a sample messaging session
      const sessionResult = await conn.execute(
        `INSERT INTO MESSAGING_SESSIONS (USER1_ID, USER2_ID, CONFERENCE_ID, IS_ACTIVE)
         VALUES (1, 2, 1, 1) RETURNING ID INTO :sessionId`,
        { sessionId: { dir: oracledb.BIND_OUT, type: oracledb.NUMBER } },
        { autoCommit: true }
      );

      const sessionId = sessionResult.outBinds.sessionId[0];
      console.log(`‚úÖ Created sample session with ID: ${sessionId}`);

      // Create some sample messages
      await conn.execute(
        `INSERT INTO MESSAGING_MESSAGES (SESSION_ID, CONTENT, MESSAGE_TYPE, SENDER_ID, ATTENDEE_ID, IS_READ)
         VALUES (:sessionId, :content, :type, :senderId, :attendeeId, :isRead)`,
        {
          sessionId: sessionId,
          content: 'Xin ch√†o! B·∫°n c√≥ th·ªÉ gi√∫p t√¥i kh√¥ng?',
          type: 'text',
          senderId: 1,
          attendeeId: 2,
          isRead: 0,
        },
        { autoCommit: true }
      );

      await conn.execute(
        `INSERT INTO MESSAGING_MESSAGES (SESSION_ID, CONTENT, MESSAGE_TYPE, SENDER_ID, ATTENDEE_ID, IS_READ)
         VALUES (:sessionId, :content, :type, :senderId, :attendeeId, :isRead)`,
        {
          sessionId: sessionId,
          content: 'Ch√†o b·∫°n! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n?',
          type: 'text',
          senderId: 2,
          attendeeId: 1,
          isRead: 0,
        },
        { autoCommit: true }
      );

      console.log('‚úÖ Sample messages created successfully');
    });

    console.log('üéâ All messaging tables created successfully!');
  } catch (error) {
    console.error('‚ùå Error creating tables:', error.message);
    if (error.message.includes('ORA-00955')) {
      console.log('‚ÑπÔ∏è  Table already exists, continuing...');
    } else {
      throw error;
    }
  }
}

createMissingMessagingTables();
