-- Conference Management System Database Schema for Oracle
-- This file creates all the necessary tables for the CMS system

-- Drop existing tables if they exist (in reverse dependency order)
DROP TABLE IF EXISTS AUDIT_LOGS CASCADE CONSTRAINTS;
DROP TABLE IF EXISTS CHECKINS CASCADE CONSTRAINTS;
DROP TABLE IF EXISTS MESSAGES CASCADE CONSTRAINTS;
DROP TABLE IF EXISTS MATCHES CASCADE CONSTRAINTS;
DROP TABLE IF EXISTS REGISTRATIONS CASCADE CONSTRAINTS;
DROP TABLE IF EXISTS USER_ROLES CASCADE CONSTRAINTS;
DROP TABLE IF EXISTS ROLE_PERMISSIONS CASCADE CONSTRAINTS;
DROP TABLE IF EXISTS SESSIONS CASCADE CONSTRAINTS;
DROP TABLE IF EXISTS ROOMS CASCADE CONSTRAINTS;
DROP TABLE IF EXISTS FLOORS CASCADE CONSTRAINTS;
DROP TABLE IF EXISTS CONFERENCES CASCADE CONSTRAINTS;
DROP TABLE IF EXISTS ATTENDEES CASCADE CONSTRAINTS;
DROP TABLE IF EXISTS APP_USERS CASCADE CONSTRAINTS;
DROP TABLE IF EXISTS ROLES CASCADE CONSTRAINTS;
DROP TABLE IF EXISTS PERMISSIONS CASCADE CONSTRAINTS;

-- Create sequences for auto-incrementing IDs
CREATE SEQUENCE seq_permissions START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE seq_roles START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE seq_app_users START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE seq_conferences START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE seq_floors START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE seq_rooms START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE seq_sessions START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE seq_attendees START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE seq_registrations START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE seq_checkins START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE seq_messages START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE seq_matches START WITH 1 INCREMENT BY 1;
CREATE SEQUENCE seq_audit_logs START WITH 1 INCREMENT BY 1;

-- PERMISSIONS table
CREATE TABLE PERMISSIONS (
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    CODE VARCHAR2(50) NOT NULL UNIQUE,
    NAME VARCHAR2(100) NOT NULL,
    CATEGORY VARCHAR2(50) NOT NULL,
    DESCRIPTION VARCHAR2(500)
);

-- ROLES table
CREATE TABLE ROLES (
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    CODE VARCHAR2(50) NOT NULL UNIQUE,
    NAME VARCHAR2(100) NOT NULL
);

-- APP_USERS table
CREATE TABLE APP_USERS (
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    EMAIL VARCHAR2(255) NOT NULL UNIQUE,
    NAME VARCHAR2(255) NOT NULL,
    PASSWORD_HASH VARCHAR2(255),
    STATUS VARCHAR2(20) DEFAULT 'active' CHECK (STATUS IN ('active', 'inactive', 'suspended')),
    FIREBASE_UID VARCHAR2(255) UNIQUE,
    AVATAR_URL VARCHAR2(500),
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    LAST_LOGIN TIMESTAMP
);

-- CONFERENCES table
CREATE TABLE CONFERENCES (
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NAME VARCHAR2(255) NOT NULL,
    DESCRIPTION CLOB,
    START_DATE DATE NOT NULL,
    END_DATE DATE NOT NULL,
    LOCATION VARCHAR2(255),
    CATEGORY VARCHAR2(50),
    ORGANIZER VARCHAR2(255),
    CAPACITY NUMBER DEFAULT 0,
    STATUS VARCHAR2(20) DEFAULT 'draft' CHECK (STATUS IN ('draft', 'published', 'active', 'completed', 'cancelled')),
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- FLOORS table
CREATE TABLE FLOORS (
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    CONFERENCE_ID NUMBER NOT NULL,
    FLOOR_NUMBER NUMBER NOT NULL,
    FOREIGN KEY (CONFERENCE_ID) REFERENCES CONFERENCES(ID) ON DELETE CASCADE
);

-- ROOMS table
CREATE TABLE ROOMS (
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    FLOOR_ID NUMBER NOT NULL,
    NAME VARCHAR2(255) NOT NULL,
    CAPACITY NUMBER DEFAULT 0,
    FOREIGN KEY (FLOOR_ID) REFERENCES FLOORS(ID) ON DELETE CASCADE
);

-- SESSIONS table
CREATE TABLE SESSIONS (
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    CONFERENCE_ID NUMBER NOT NULL,
    ROOM_ID NUMBER,
    TITLE VARCHAR2(255) NOT NULL,
    SPEAKER VARCHAR2(255),
    START_TIME TIMESTAMP NOT NULL,
    END_TIME TIMESTAMP NOT NULL,
    STATUS VARCHAR2(20) DEFAULT 'upcoming' CHECK (STATUS IN ('upcoming', 'live', 'completed', 'cancelled')),
    DESCRIPTION CLOB,
    FOREIGN KEY (CONFERENCE_ID) REFERENCES CONFERENCES(ID) ON DELETE CASCADE,
    FOREIGN KEY (ROOM_ID) REFERENCES ROOMS(ID) ON DELETE SET NULL
);

-- ATTENDEES table
CREATE TABLE ATTENDEES (
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    NAME VARCHAR2(255) NOT NULL,
    EMAIL VARCHAR2(255) NOT NULL UNIQUE,
    PHONE VARCHAR2(20),
    COMPANY VARCHAR2(255),
    POSITION VARCHAR2(255),
    AVATAR_URL VARCHAR2(500),
    DIETARY VARCHAR2(100),
    SPECIAL_NEEDS CLOB,
    DATE_OF_BIRTH DATE,
    GENDER VARCHAR2(10) CHECK (GENDER IN ('male', 'female', 'other')),
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);

-- REGISTRATIONS table
CREATE TABLE REGISTRATIONS (
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ATTENDEE_ID NUMBER NOT NULL,
    CONFERENCE_ID NUMBER NOT NULL,
    REGISTRATION_DATE TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    STATUS VARCHAR2(20) DEFAULT 'registered' CHECK (STATUS IN ('registered', 'checked-in', 'cancelled')),
    QR_CODE VARCHAR2(100) UNIQUE,
    FOREIGN KEY (ATTENDEE_ID) REFERENCES ATTENDEES(ID) ON DELETE CASCADE,
    FOREIGN KEY (CONFERENCE_ID) REFERENCES CONFERENCES(ID) ON DELETE CASCADE,
    UNIQUE (ATTENDEE_ID, CONFERENCE_ID)
);

-- CHECKINS table
CREATE TABLE CHECKINS (
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    REGISTRATION_ID NUMBER NOT NULL,
    CHECKIN_TIME TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    METHOD VARCHAR2(20) DEFAULT 'qr' CHECK (METHOD IN ('qr', 'manual', 'nfc')),
    STATUS VARCHAR2(20) DEFAULT 'success' CHECK (STATUS IN ('success', 'failed', 'duplicate')),
    FOREIGN KEY (REGISTRATION_ID) REFERENCES REGISTRATIONS(ID) ON DELETE CASCADE
);

-- MESSAGES table
CREATE TABLE MESSAGES (
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    SESSION_ID NUMBER NOT NULL,
    ATTENDEE_ID NUMBER NOT NULL,
    TS TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    TYPE VARCHAR2(20) DEFAULT 'text' CHECK (TYPE IN ('text', 'question', 'answer')),
    CONTENT CLOB NOT NULL,
    FOREIGN KEY (SESSION_ID) REFERENCES SESSIONS(ID) ON DELETE CASCADE,
    FOREIGN KEY (ATTENDEE_ID) REFERENCES ATTENDEES(ID) ON DELETE CASCADE
);

-- MATCHES table
CREATE TABLE MATCHES (
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    ATTENDEE_A_ID NUMBER NOT NULL,
    ATTENDEE_B_ID NUMBER NOT NULL,
    SCORE NUMBER(5,2) DEFAULT 0,
    CREATED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (ATTENDEE_A_ID) REFERENCES ATTENDEES(ID) ON DELETE CASCADE,
    FOREIGN KEY (ATTENDEE_B_ID) REFERENCES ATTENDEES(ID) ON DELETE CASCADE,
    CHECK (ATTENDEE_A_ID != ATTENDEE_B_ID)
);

-- USER_ROLES table
CREATE TABLE USER_ROLES (
    USER_ID NUMBER NOT NULL,
    ROLE_ID NUMBER NOT NULL,
    ASSIGNED_AT TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (USER_ID, ROLE_ID),
    FOREIGN KEY (USER_ID) REFERENCES APP_USERS(ID) ON DELETE CASCADE,
    FOREIGN KEY (ROLE_ID) REFERENCES ROLES(ID) ON DELETE CASCADE
);

-- ROLE_PERMISSIONS table
CREATE TABLE ROLE_PERMISSIONS (
    ROLE_ID NUMBER NOT NULL,
    PERMISSION_ID NUMBER NOT NULL,
    PRIMARY KEY (ROLE_ID, PERMISSION_ID),
    FOREIGN KEY (ROLE_ID) REFERENCES ROLES(ID) ON DELETE CASCADE,
    FOREIGN KEY (PERMISSION_ID) REFERENCES PERMISSIONS(ID) ON DELETE CASCADE
);

-- AUDIT_LOGS table
CREATE TABLE AUDIT_LOGS (
    ID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    TS TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    USER_ID NUMBER,
    ACTION VARCHAR2(255) NOT NULL,
    RESOURCE VARCHAR2(100) NOT NULL,
    DETAILS CLOB,
    IP_ADDRESS VARCHAR2(45),
    USER_AGENT VARCHAR2(500),
    STATUS VARCHAR2(20) DEFAULT 'success' CHECK (STATUS IN ('success', 'failed')),
    CATEGORY VARCHAR2(50) DEFAULT 'general' CHECK (CATEGORY IN ('auth', 'data', 'system', 'conference', 'session', 'general')),
    FOREIGN KEY (USER_ID) REFERENCES APP_USERS(ID) ON DELETE SET NULL
);

-- Create indexes for performance
CREATE INDEX idx_app_users_email ON APP_USERS(EMAIL);
CREATE INDEX idx_app_users_status ON APP_USERS(STATUS);
CREATE INDEX idx_conferences_status ON CONFERENCES(STATUS);
CREATE INDEX idx_conferences_dates ON CONFERENCES(START_DATE, END_DATE);
CREATE INDEX idx_sessions_conference ON SESSIONS(CONFERENCE_ID);
CREATE INDEX idx_sessions_times ON SESSIONS(START_TIME, END_TIME);
CREATE INDEX idx_attendees_email ON ATTENDEES(EMAIL);
CREATE INDEX idx_registrations_attendee ON REGISTRATIONS(ATTENDEE_ID);
CREATE INDEX idx_registrations_conference ON REGISTRATIONS(CONFERENCE_ID);
CREATE INDEX idx_checkins_registration ON CHECKINS(REGISTRATION_ID);
CREATE INDEX idx_messages_session ON MESSAGES(SESSION_ID);
CREATE INDEX idx_messages_attendee ON MESSAGES(ATTENDEE_ID);
CREATE INDEX idx_audit_logs_user ON AUDIT_LOGS(USER_ID);
CREATE INDEX idx_audit_logs_ts ON AUDIT_LOGS(TS);
CREATE INDEX idx_audit_logs_action ON AUDIT_LOGS(ACTION);

-- Create unique constraint for matches to prevent duplicate pairs
CREATE UNIQUE INDEX idx_matches_unique ON MATCHES(
    LEAST(ATTENDEE_A_ID, ATTENDEE_B_ID), 
    GREATEST(ATTENDEE_A_ID, ATTENDEE_B_ID)
);

COMMIT;
