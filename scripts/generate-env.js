const crypto = require('crypto');
const fs = require('fs');
const path = require('path');

/**
 * T·ª± ƒë·ªông t·∫°o file .env v·ªõi JWT secrets ƒë∆∞·ª£c generate ng·∫´u nhi√™n
 */
function generateJWTSecrets() {
  // T·∫°o JWT secrets ng·∫´u nhi√™n v·ªõi ƒë·ªô d√†i 64 k√Ω t·ª±
  const accessSecret = crypto.randomBytes(32).toString('hex');
  const refreshSecret = crypto.randomBytes(32).toString('hex');
  
  return { accessSecret, refreshSecret };
}

/**
 * T·∫°o n·ªôi dung file .env t·ª´ template
 */
function createEnvContent(accessSecret, refreshSecret) {
  return `# Server Configuration
NODE_ENV=development
PORT=4000

# Database Configuration
DB_USER=your_db_user
DB_PASSWORD=your_db_password
DB_CONNECT_STRING=localhost:1521/XE

# JWT Configuration (Auto-generated)
JWT_ACCESS_SECRET=${accessSecret}
JWT_REFRESH_SECRET=${refreshSecret}
JWT_ACCESS_TTL=15m
JWT_REFRESH_TTL=7d

# Rate Limiting
RATE_LIMIT_WINDOW_MS=60000
RATE_LIMIT_MAX=100

# CORS Configuration
CORS_ORIGINS=http://localhost:3000,http://localhost:3001

# Logging
LOG_LEVEL=debug
`;
}

/**
 * Ki·ªÉm tra v√† t·∫°o file .env n·∫øu ch∆∞a t·ªìn t·∫°i
 */
function ensureEnvFile() {
  const envPath = path.join(__dirname, '..', '.env');
  const envExamplePath = path.join(__dirname, '..', 'env.example');
  
  // N·∫øu file .env ƒë√£ t·ªìn t·∫°i, kh√¥ng l√†m g√¨
  if (fs.existsSync(envPath)) {
    console.log('‚úÖ File .env ƒë√£ t·ªìn t·∫°i');
    return;
  }
  
  console.log('üîß T·∫°o file .env m·ªõi...');
  
  // T·∫°o JWT secrets m·ªõi
  const { accessSecret, refreshSecret } = generateJWTSecrets();
  
  // T·∫°o n·ªôi dung file .env
  const envContent = createEnvContent(accessSecret, refreshSecret);
  
  // Ghi file .env
  fs.writeFileSync(envPath, envContent, 'utf8');
  
  console.log('‚úÖ ƒê√£ t·∫°o file .env v·ªõi JWT secrets m·ªõi');
  console.log('üîë JWT_ACCESS_SECRET:', accessSecret.substring(0, 8) + '...');
  console.log('üîë JWT_REFRESH_SECRET:', refreshSecret.substring(0, 8) + '...');
  console.log('‚ö†Ô∏è  L∆∞u √Ω: C√°c secrets n√†y s·∫Ω ƒë∆∞·ª£c t·∫°o m·ªõi m·ªói l·∫ßn ch·∫°y script n·∫øu file .env kh√¥ng t·ªìn t·∫°i');
}

/**
 * C·∫≠p nh·∫≠t JWT secrets trong file .env hi·ªán c√≥
 */
function updateJWTSecrets() {
  const envPath = path.join(__dirname, '..', '.env');
  
  if (!fs.existsSync(envPath)) {
    console.log('‚ùå File .env kh√¥ng t·ªìn t·∫°i. Ch·∫°y ensureEnvFile() tr∆∞·ªõc.');
    return;
  }
  
  console.log('üîÑ C·∫≠p nh·∫≠t JWT secrets...');
  
  // ƒê·ªçc file .env hi·ªán t·∫°i
  let envContent = fs.readFileSync(envPath, 'utf8');
  
  // T·∫°o JWT secrets m·ªõi
  const { accessSecret, refreshSecret } = generateJWTSecrets();
  
  // C·∫≠p nh·∫≠t JWT secrets
  envContent = envContent.replace(
    /JWT_ACCESS_SECRET=.*/,
    `JWT_ACCESS_SECRET=${accessSecret}`
  );
  envContent = envContent.replace(
    /JWT_REFRESH_SECRET=.*/,
    `JWT_REFRESH_SECRET=${refreshSecret}`
  );
  
  // Ghi l·∫°i file
  fs.writeFileSync(envPath, envContent, 'utf8');
  
  console.log('‚úÖ ƒê√£ c·∫≠p nh·∫≠t JWT secrets');
  console.log('üîë JWT_ACCESS_SECRET:', accessSecret.substring(0, 8) + '...');
  console.log('üîë JWT_REFRESH_SECRET:', refreshSecret.substring(0, 8) + '...');
}

/**
 * Ki·ªÉm tra v√† t·ª± ƒë·ªông c·∫≠p nh·∫≠t JWT secrets n·∫øu ch√∫ng kh√¥ng an to√†n
 */
function checkAndUpdateUnsafeSecrets() {
  const envPath = path.join(__dirname, '..', '.env');
  
  if (!fs.existsSync(envPath)) {
    console.log('‚ùå File .env kh√¥ng t·ªìn t·∫°i. Ch·∫°y ensureEnvFile() tr∆∞·ªõc.');
    return false;
  }
  
  // ƒê·ªçc file .env hi·ªán t·∫°i
  const envContent = fs.readFileSync(envPath, 'utf8');
  
  // Ki·ªÉm tra xem c√≥ JWT secrets kh√¥ng an to√†n kh√¥ng
  const hasUnsafeAccessSecret = envContent.includes('JWT_ACCESS_SECRET=your_super_secret_access_key_here_change_in_production');
  const hasUnsafeRefreshSecret = envContent.includes('JWT_REFRESH_SECRET=your_super_secret_refresh_key_here_change_in_production');
  
  if (hasUnsafeAccessSecret || hasUnsafeRefreshSecret) {
    console.log('‚ö†Ô∏è  Ph√°t hi·ªán JWT secrets kh√¥ng an to√†n!');
    console.log('üîÑ T·ª± ƒë·ªông c·∫≠p nh·∫≠t JWT secrets...');
    updateJWTSecrets();
    return true;
  }
  
  console.log('‚úÖ JWT secrets ƒë√£ an to√†n');
  return false;
}

/**
 * T·ª± ƒë·ªông c·∫≠p nh·∫≠t JWT secrets m·ªói khi kh·ªüi ƒë·ªông ·ª©ng d·ª•ng
 */
function autoUpdateJWTSecrets() {
  console.log('üîç Ki·ªÉm tra JWT secrets...');
  
  // Ki·ªÉm tra v√† c·∫≠p nh·∫≠t n·∫øu c·∫ßn
  const wasUpdated = checkAndUpdateUnsafeSecrets();
  
  if (wasUpdated) {
    console.log('üîÑ JWT secrets ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t t·ª± ƒë·ªông');
  } else {
    console.log('‚úÖ JWT secrets ƒë√£ s·∫µn s√†ng');
  }
}

// Ch·∫°y script
if (require.main === module) {
  const command = process.argv[2];
  
  switch (command) {
    case 'update':
      updateJWTSecrets();
      break;
    case 'check':
      checkAndUpdateUnsafeSecrets();
      break;
    case 'auto':
      autoUpdateJWTSecrets();
      break;
    case 'ensure':
    default:
      ensureEnvFile();
      break;
  }
}

module.exports = {
  generateJWTSecrets,
  createEnvContent,
  ensureEnvFile,
  updateJWTSecrets,
  checkAndUpdateUnsafeSecrets,
  autoUpdateJWTSecrets
};
