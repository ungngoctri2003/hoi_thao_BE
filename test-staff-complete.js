const fetch = require('node-fetch');

async function testStaffComplete() {
  const baseURL = 'http://localhost:4000/api/v1';
  
  try {
    // Login as staff
    console.log('üîê Logging in as staff...');
    const loginResponse = await fetch(`${baseURL}/auth/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        email: 'staff2@conference.vn',
        password: 'staff123'
      })
    });
    
    if (!loginResponse.ok) {
      const errorData = await loginResponse.json();
      console.log('‚ùå Staff login failed:', errorData);
      return;
    }
    
    const loginData = await loginResponse.json();
    const token = loginData.data.accessToken;
    const staffUser = loginData.data.user;
    console.log('‚úÖ Staff login successful!');
    console.log('Staff user:', staffUser);
    
    // Test comprehensive staff actions
    console.log('\nüìã Testing comprehensive staff actions...');
    
    const comprehensiveActions = [
      // Navigation actions
      { action: 'Truy c·∫≠p trang Dashboard', page: 'B·∫£ng ƒëi·ªÅu khi·ªÉn', details: 'Staff accessed main dashboard' },
      { action: 'Truy c·∫≠p trang Qu·∫£n l√Ω ng∆∞·ªùi tham d·ª±', page: 'Qu·∫£n l√Ω ng∆∞·ªùi tham d·ª±', details: 'Staff accessed attendees management' },
      { action: 'Truy c·∫≠p trang Check-in', page: 'Check-in', details: 'Staff accessed check-in system' },
      { action: 'Truy c·∫≠p trang Ph√¢n t√≠ch', page: 'Ph√¢n t√≠ch', details: 'Staff accessed analytics dashboard' },
      { action: 'Truy c·∫≠p trang C√†i ƒë·∫∑t', page: 'C√†i ƒë·∫∑t', details: 'Staff accessed settings page' },
      
      // Attendee management actions
      { action: 'Xem danh s√°ch ng∆∞·ªùi tham d·ª±', page: 'Qu·∫£n l√Ω ng∆∞·ªùi tham d·ª±', details: 'Staff viewed all attendees list' },
      { action: 'T√¨m ki·∫øm ng∆∞·ªùi tham d·ª±', page: 'Qu·∫£n l√Ω ng∆∞·ªùi tham d·ª±', details: 'Staff searched for specific attendees' },
      { action: 'L·ªçc ng∆∞·ªùi tham d·ª± theo vai tr√≤', page: 'Qu·∫£n l√Ω ng∆∞·ªùi tham d·ª±', details: 'Staff filtered attendees by role' },
      { action: 'T·∫°o m·ªõi ng∆∞·ªùi tham d·ª±', page: 'Qu·∫£n l√Ω ng∆∞·ªùi tham d·ª±', details: 'Staff created new attendee record' },
      { action: 'C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi tham d·ª±', page: 'Qu·∫£n l√Ω ng∆∞·ªùi tham d·ª±', details: 'Staff updated attendee information' },
      { action: 'X√≥a ng∆∞·ªùi tham d·ª±', page: 'Qu·∫£n l√Ω ng∆∞·ªùi tham d·ª±', details: 'Staff deleted attendee record' },
      { action: 'Xu·∫•t danh s√°ch ng∆∞·ªùi tham d·ª±', page: 'Qu·∫£n l√Ω ng∆∞·ªùi tham d·ª±', details: 'Staff exported attendees list' },
      
      // Check-in/Check-out actions
      { action: 'Check-in ng∆∞·ªùi tham d·ª±', page: 'Check-in', details: 'Staff performed attendee check-in' },
      { action: 'Check-out ng∆∞·ªùi tham d·ª±', page: 'Check-in', details: 'Staff performed attendee check-out' },
      { action: 'Xem l·ªãch s·ª≠ Check-in', page: 'Check-in', details: 'Staff viewed check-in history' },
      { action: 'Qu√©t m√£ QR Check-in', page: 'Check-in', details: 'Staff used QR scanner for check-in' },
      
      // Conference management actions
      { action: 'Xem danh s√°ch h·ªôi ngh·ªã', page: 'Qu·∫£n l√Ω h·ªôi ngh·ªã', details: 'Staff viewed conferences list' },
      { action: 'T·∫°o m·ªõi h·ªôi ngh·ªã', page: 'Qu·∫£n l√Ω h·ªôi ngh·ªã', details: 'Staff created new conference' },
      { action: 'C·∫≠p nh·∫≠t th√¥ng tin h·ªôi ngh·ªã', page: 'Qu·∫£n l√Ω h·ªôi ngh·ªã', details: 'Staff updated conference details' },
      { action: 'Xem chi ti·∫øt h·ªôi ngh·ªã', page: 'Qu·∫£n l√Ω h·ªôi ngh·ªã', details: 'Staff viewed conference details' },
      
      // Analytics and reporting
      { action: 'Xem b√°o c√°o tham d·ª±', page: 'Ph√¢n t√≠ch', details: 'Staff viewed attendance reports' },
      { action: 'Xem th·ªëng k√™ Check-in', page: 'Ph√¢n t√≠ch', details: 'Staff viewed check-in statistics' },
      { action: 'Xu·∫•t b√°o c√°o', page: 'Ph√¢n t√≠ch', details: 'Staff exported analytics report' },
      
      // Profile and settings
      { action: 'C·∫≠p nh·∫≠t h·ªì s∆° c√° nh√¢n', page: 'H·ªì s∆° c√° nh√¢n', details: 'Staff updated personal profile' },
      { action: 'Thay ƒë·ªïi m·∫≠t kh·∫©u', page: 'C√†i ƒë·∫∑t', details: 'Staff changed password' },
      { action: 'C·∫≠p nh·∫≠t c√†i ƒë·∫∑t h·ªá th·ªëng', page: 'C√†i ƒë·∫∑t', details: 'Staff updated system settings' },
      
      // File operations
      { action: 'T·∫£i l√™n danh s√°ch ng∆∞·ªùi tham d·ª±', page: 'Qu·∫£n l√Ω ng∆∞·ªùi tham d·ª±', details: 'Staff uploaded attendees list file' },
      { action: 'T·∫£i xu·ªëng m·∫´u ƒëƒÉng k√Ω', page: 'Qu·∫£n l√Ω ng∆∞·ªùi tham d·ª±', details: 'Staff downloaded registration template' },
      
      // Communication
      { action: 'G·ª≠i th√¥ng b√°o', page: 'Th√¥ng b√°o', details: 'Staff sent notification to attendees' },
      { action: 'Xem tin nh·∫Øn', page: 'Tin nh·∫Øn', details: 'Staff viewed messages' },
      { action: 'Tr·∫£ l·ªùi tin nh·∫Øn', page: 'Tin nh·∫Øn', details: 'Staff replied to message' }
    ];
    
    let successCount = 0;
    let errorCount = 0;
    
    for (let i = 0; i < comprehensiveActions.length; i++) {
      const action = comprehensiveActions[i];
      console.log(`\n${i + 1}/${comprehensiveActions.length}. Testing: ${action.action}`);
      
      try {
        const auditResponse = await fetch(`${baseURL}/audit/frontend`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': `Bearer ${token}`
          },
          body: JSON.stringify(action)
        });
        
        if (auditResponse.ok) {
          console.log(`   ‚úÖ ${action.action} logged successfully`);
          successCount++;
        } else {
          const errorData = await auditResponse.json();
          console.log(`   ‚ùå ${action.action} failed: ${errorData.error.message}`);
          errorCount++;
        }
      } catch (error) {
        console.log(`   ‚ùå ${action.action} error: ${error.message}`);
        errorCount++;
      }
      
      // Small delay between actions
      await new Promise(resolve => setTimeout(resolve, 200));
    }
    
    console.log(`\nüìä Test Results:`);
    console.log(`   ‚úÖ Successful: ${successCount}`);
    console.log(`   ‚ùå Failed: ${errorCount}`);
    console.log(`   üìà Success Rate: ${((successCount / comprehensiveActions.length) * 100).toFixed(1)}%`);
    
    // Get final audit logs count
    console.log('\nüìã Fetching final audit logs...');
    const logsResponse = await fetch(`${baseURL}/audit/logs`, {
      method: 'GET',
      headers: {
        'Authorization': `Bearer ${token}`
      }
    });
    
    if (logsResponse.ok) {
      const logsData = await logsResponse.json();
      const totalLogs = logsData.data?.length || 0;
      console.log(`‚úÖ Total audit logs in database: ${totalLogs}`);
      
      // Show recent staff logs
      const recentLogs = logsData.data?.slice(0, 5) || [];
      console.log('\nüìù Recent audit logs:');
      recentLogs.forEach((log, index) => {
        console.log(`   ${index + 1}. [User ${log.USER_ID}] ${log.ACTION_NAME} - ${log.RESOURCE_NAME} (${log.CATEGORY}) - ${log.TS}`);
      });
    } else {
      console.log('‚ùå Failed to fetch final audit logs');
    }
    
    console.log('\nüéâ Staff audit testing completed!');
    console.log('üí° You can now check the audit logs in the frontend at: http://localhost:3001/audit');
    
  } catch (error) {
    console.error('‚ùå Test failed:', error.message);
  }
}

testStaffComplete();
