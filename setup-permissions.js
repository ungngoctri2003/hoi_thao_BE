const oracledb = require('oracledb');
require('dotenv').config();

const dbConfig = {
  user: process.env.DB_USER,
  password: process.env.DB_PASSWORD,
  connectString: process.env.DB_CONNECT_STRING,
};

async function setupPermissions() {
  let conn;
  try {
    console.log('üîå Connecting to database...');
    conn = await oracledb.getConnection(dbConfig);
    console.log('‚úÖ Connected to database');

    // Check if permissions table exists and has data
    console.log('üìã Checking permissions table...');
    const permCheck = await conn.execute(
      `SELECT COUNT(*) as count FROM PERMISSIONS`,
      {},
      { outFormat: oracledb.OUT_FORMAT_OBJECT }
    );
    const permCount = permCheck.rows[0].COUNT;
    console.log(`üìä Found ${permCount} permissions in database`);

    // Check if roles table exists and has data
    console.log('üë• Checking roles table...');
    const roleCheck = await conn.execute(
      `SELECT COUNT(*) as count FROM ROLES`,
      {},
      { outFormat: oracledb.OUT_FORMAT_OBJECT }
    );
    const roleCount = roleCheck.rows[0].COUNT;
    console.log(`üìä Found ${roleCount} roles in database`);

    // Always update permissions to match frontend format
    console.log('üîß Updating permissions to match frontend format...');
    
    // First, clear existing permissions
    await conn.execute(`DELETE FROM ROLE_PERMISSIONS`, {}, { autoCommit: true });
    await conn.execute(`DELETE FROM PERMISSIONS`, {}, { autoCommit: true });
    console.log('üóëÔ∏è Cleared existing permissions');

    const permissions = [
      { code: 'dashboard.view', name: 'Xem Dashboard', category: 'Dashboard', description: 'Truy c·∫≠p trang t·ªïng quan' },
      { code: 'profile.view', name: 'Xem Profile', category: 'Profile', description: 'Xem th√¥ng tin c√° nh√¢n' },
      { code: 'conferences.view', name: 'Xem H·ªôi ngh·ªã', category: 'Conferences', description: 'Xem danh s√°ch h·ªôi ngh·ªã' },
      { code: 'conferences.create', name: 'T·∫°o H·ªôi ngh·ªã', category: 'Conferences', description: 'T·∫°o h·ªôi ngh·ªã m·ªõi' },
      { code: 'conferences.update', name: 'C·∫≠p nh·∫≠t H·ªôi ngh·ªã', category: 'Conferences', description: 'C·∫≠p nh·∫≠t th√¥ng tin h·ªôi ngh·ªã' },
      { code: 'conferences.delete', name: 'X√≥a H·ªôi ngh·ªã', category: 'Conferences', description: 'X√≥a h·ªôi ngh·ªã' },
      { code: 'attendees.view', name: 'Xem Ng∆∞·ªùi tham d·ª±', category: 'Attendees', description: 'Xem danh s√°ch ng∆∞·ªùi tham d·ª±' },
      { code: 'attendees.read', name: 'ƒê·ªçc Ng∆∞·ªùi tham d·ª±', category: 'Attendees', description: 'ƒê·ªçc th√¥ng tin ng∆∞·ªùi tham d·ª±' },
      { code: 'attendees.write', name: 'Ghi Ng∆∞·ªùi tham d·ª±', category: 'Attendees', description: 'Ghi th√¥ng tin ng∆∞·ªùi tham d·ª±' },
      { code: 'attendees.manage', name: 'Qu·∫£n l√Ω Ng∆∞·ªùi tham d·ª±', category: 'Attendees', description: 'Qu·∫£n l√Ω ng∆∞·ªùi tham d·ª±' },
      { code: 'checkin.manage', name: 'Qu·∫£n l√Ω Check-in', category: 'Check-in', description: 'Qu·∫£n l√Ω check-in' },
      { code: 'roles.manage', name: 'Qu·∫£n l√Ω Ph√¢n quy·ªÅn', category: 'Roles', description: 'Qu·∫£n l√Ω ph√¢n quy·ªÅn' },
      { code: 'audit.view', name: 'Xem Nh·∫≠t k√Ω', category: 'Audit', description: 'Xem nh·∫≠t k√Ω h·ªá th·ªëng' },
      { code: 'settings.manage', name: 'Qu·∫£n l√Ω C√†i ƒë·∫∑t', category: 'Settings', description: 'Qu·∫£n l√Ω c√†i ƒë·∫∑t' },
      { code: 'analytics.view', name: 'Xem Ph√¢n t√≠ch', category: 'Analytics', description: 'Xem b√°o c√°o ph√¢n t√≠ch' },
      { code: 'networking.view', name: 'Xem K·∫øt n·ªëi m·∫°ng', category: 'Networking', description: 'Xem k·∫øt n·ªëi m·∫°ng' },
      { code: 'venue.view', name: 'Xem B·∫£n ƒë·ªì', category: 'Venue', description: 'Xem b·∫£n ƒë·ªì ƒë·ªãa ƒëi·ªÉm' },
      { code: 'sessions.view', name: 'Xem Phi√™n tr·ª±c ti·∫øp', category: 'Sessions', description: 'Xem phi√™n tr·ª±c ti·∫øp' },
      { code: 'badges.view', name: 'Xem Huy hi·ªáu', category: 'Badges', description: 'Xem huy hi·ªáu' },
      { code: 'mobile.view', name: 'Xem ·ª®ng d·ª•ng di ƒë·ªông', category: 'Mobile', description: 'Xem ·ª©ng d·ª•ng di ƒë·ªông' },
      { code: 'my-events.view', name: 'Xem S·ª± ki·ªán c·ªßa t√¥i', category: 'Events', description: 'Xem s·ª± ki·ªán c·ªßa t√¥i' },
    ];

    for (const perm of permissions) {
      await conn.execute(
        `INSERT INTO PERMISSIONS (CODE, NAME, CATEGORY, DESCRIPTION) VALUES (:code, :name, :category, :description)`,
        perm,
        { autoCommit: true }
      );
      console.log(`‚úÖ Created permission: ${perm.name}`);
    }

    // If no roles, create them
    if (roleCount === 0) {
      console.log('üîß Creating roles...');
      const roles = [
        { code: 'admin', name: 'Qu·∫£n tr·ªã vi√™n' },
        { code: 'staff', name: 'Nh√¢n vi√™n' },
        { code: 'attendee', name: 'Tham d·ª±' },
      ];

      for (const role of roles) {
        await conn.execute(
          `INSERT INTO ROLES (CODE, NAME) VALUES (:code, :name)`,
          role,
          { autoCommit: true }
        );
        console.log(`‚úÖ Created role: ${role.name}`);
      }
    }

    // Get role IDs
    const roleResult = await conn.execute(
      `SELECT ID, CODE FROM ROLES`,
      {},
      { outFormat: oracledb.OUT_FORMAT_OBJECT }
    );
    const roles = roleResult.rows;
    console.log('üìã Available roles:', roles);

    // Get permission IDs
    const permResult = await conn.execute(
      `SELECT ID, CODE FROM PERMISSIONS`,
      {},
      { outFormat: oracledb.OUT_FORMAT_OBJECT }
    );
    const allPermissions = permResult.rows;
    console.log('üìã Available permissions:', allPermissions);

    // Assign permissions to roles
    console.log('üîó Assigning permissions to roles...');
    
    // Admin gets all permissions
    const adminRole = roles.find(r => r.CODE === 'admin');
    if (adminRole) {
      for (const perm of allPermissions) {
        try {
          await conn.execute(
            `INSERT INTO ROLE_PERMISSIONS (ROLE_ID, PERMISSION_ID) VALUES (:roleId, :permId)`,
            { roleId: adminRole.ID, permId: perm.ID },
            { autoCommit: true }
          );
        } catch (error) {
          // Ignore duplicate key errors
          if (!error.message.includes('unique constraint')) {
            console.warn(`‚ö†Ô∏è Error assigning permission ${perm.CODE} to admin:`, error.message);
          }
        }
      }
      console.log(`‚úÖ Assigned all permissions to admin role`);
    }

    // Staff gets limited permissions
    const staffRole = roles.find(r => r.CODE === 'staff');
    if (staffRole) {
      const staffPermissions = [
        'dashboard.view', 'profile.view', 'conferences.view', 'conferences.create', 'conferences.update',
        'attendees.view', 'attendees.read', 'attendees.write', 'attendees.manage',
        'checkin.manage', 'networking.view', 'venue.view', 'sessions.view', 'badges.view', 'mobile.view'
      ];
      
      for (const permCode of staffPermissions) {
        const perm = allPermissions.find(p => p.CODE === permCode);
        if (perm) {
          try {
            await conn.execute(
              `INSERT INTO ROLE_PERMISSIONS (ROLE_ID, PERMISSION_ID) VALUES (:roleId, :permId)`,
              { roleId: staffRole.ID, permId: perm.ID },
              { autoCommit: true }
            );
          } catch (error) {
            if (!error.message.includes('unique constraint')) {
              console.warn(`‚ö†Ô∏è Error assigning permission ${permCode} to staff:`, error.message);
            }
          }
        }
      }
      console.log(`‚úÖ Assigned staff permissions`);
    }

    // Attendee gets basic permissions
    const attendeeRole = roles.find(r => r.CODE === 'attendee');
    if (attendeeRole) {
      const attendeePermissions = [
        'dashboard.view', 'profile.view', 'networking.view', 'venue.view', 
        'sessions.view', 'badges.view', 'mobile.view', 'my-events.view'
      ];
      
      for (const permCode of attendeePermissions) {
        const perm = allPermissions.find(p => p.CODE === permCode);
        if (perm) {
          try {
            await conn.execute(
              `INSERT INTO ROLE_PERMISSIONS (ROLE_ID, PERMISSION_ID) VALUES (:roleId, :permId)`,
              { roleId: attendeeRole.ID, permId: perm.ID },
              { autoCommit: true }
            );
          } catch (error) {
            if (!error.message.includes('unique constraint')) {
              console.warn(`‚ö†Ô∏è Error assigning permission ${permCode} to attendee:`, error.message);
            }
          }
        }
      }
      console.log(`‚úÖ Assigned attendee permissions`);
    }

    // Check final state
    console.log('üìä Final state:');
    const finalRoleCheck = await conn.execute(
      `SELECT COUNT(*) as count FROM ROLES`,
      {},
      { outFormat: oracledb.OUT_FORMAT_OBJECT }
    );
    const finalPermCheck = await conn.execute(
      `SELECT COUNT(*) as count FROM PERMISSIONS`,
      {},
      { outFormat: oracledb.OUT_FORMAT_OBJECT }
    );
    const finalRolePermCheck = await conn.execute(
      `SELECT COUNT(*) as count FROM ROLE_PERMISSIONS`,
      {},
      { outFormat: oracledb.OUT_FORMAT_OBJECT }
    );

    console.log(`‚úÖ Roles: ${finalRoleCheck.rows[0].COUNT}`);
    console.log(`‚úÖ Permissions: ${finalPermCheck.rows[0].COUNT}`);
    console.log(`‚úÖ Role-Permission assignments: ${finalRolePermCheck.rows[0].COUNT}`);

    console.log('üéâ Permission setup completed successfully!');

  } catch (error) {
    console.error('‚ùå Error setting up permissions:', error);
  } finally {
    if (conn) {
      try {
        await conn.close();
        console.log('üîå Database connection closed');
      } catch (error) {
        console.error('Error closing connection:', error);
      }
    }
  }
}

setupPermissions();
